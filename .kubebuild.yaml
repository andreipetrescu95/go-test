apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: go-test-pipeline-
spec:
  imagePullSecrets:
  - name: dockerhub
  volumes:
  - name: git-secret
    secret:
      secretName: git-secret
      defaultMode: 256
  - name: docker-volume
    secret:
      secretName: "{{workflow.parameters.dockerSecretName}}"
      defaultMode: 0600
      items:
      - key: .dockerconfigjson
        path: config.json
  entrypoint: go-test-pipeline
  arguments:
    parameters:
    - name: buildNumber
      value: "0"
    - name: branch
      value: develop
    - name: repo
      value: git@github.com:cloud-hero/go-test.git
    - name: revision
      value: HEAD
    - name: dockerSecretName
      value: dockerhub
  volumeClaimTemplates:
  - metadata:
      name: go-test-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
  templates:
  - name: alpine-sh
    inputs:
      parameters:
      - name: command
    container:
      image: alpine
      command: ["sh","-c"]
      args: ["{{inputs.parameters.command}}"]
      volumeMounts:
      - name: go-test-pvc
        mountPath: /code
  - name: git
    inputs:
      parameters:
      - name: targetDir
    container:
      image: alpine/git
      args: ["clone","--depth=1","-b","$(BRANCH)","-o","$(REVISION)","$(REPO)","/code$(TARGET_DIR)"]
      volumeMounts:
      - name: go-test-pvc
        mountPath: /code
      - mountPath: /root/.ssh/id_rsa
        subPath: sshPrivateKey
        name: git-secret

      env:
      - name: GIT_SSH_COMMAND
        value: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
      - name: BRANCH
        value: "{{workflow.parameters.branch}}"
      - name: REPO
        value: "{{workflow.parameters.repo}}"
      - name: REVISION
        value: "{{workflow.parameters.revision}}"
      - name: TARGET_DIR
        value: "{{inputs.parameters.targetDir}}"
  - name: ci-dind
    inputs:
      parameters:
      - name: image
    container:
      image: docker:stable
      command: [sh, -c]
      args: ["until docker ps; do sleep 3; done && 
      docker build 
      -t $(IMAGE):$(TAG) . && 
      docker push $(IMAGE):$(TAG) && 
      docker tag $(IMAGE):$(TAG) $(IMAGE):latest && 
      docker push $(IMAGE):latest"]
      workingDir: /code
      volumeMounts:
      - name: go-test-pvc
        mountPath: /code
      - name: docker-volume
        mountPath: "/root/.docker"
        readOnly: true
      env:
      - name: DOCKER_HOST
        value: 127.0.0.1
      - name: IMAGE
        value: "{{inputs.parameters.image}}"
      - name: TAG
        value: "{{workflow.parameters.buildNumber}}"
    sidecars:
    - name: dind
      image: docker:stable-dind
      args: ["--insecure-registry=devops02.connex.ro:18443"]
      securityContext:
        privileged: true
      mirrorVolumeMounts: true
  - name: helm-template
    inputs:
      parameters:
      - name: additionalParameters
      - name: image
      - name: outputName
      - name: helmFolder
    container: 
      image: alpine/helm
      command: [sh, -c]
      args: ["helm template --set image=$(IMAGE):$(TAG) $(ADDITIONAL_PARAMETERS) $(HELM_FOLDER) > $(OUTPUT_NAME)"]
      env:
      - name: ADDITIONAL_PARAMETERS
        value: "{{inputs.parameters.additionalParameters}}"
      - name: IMAGE
        value: "{{inputs.parameters.image}}"
      - name: TAG
        value: "{{workflow.parameters.buildNumber}}"
      - name: HELM_FOLDER
        value: "{{inputs.parameters.helmFolder}}"
      - name: OUTPUT_NAME
        value: "{{inputs.parameters.outputName}}"
      workingDir: /code
      volumeMounts:
      - name: go-test-pvc
        mountPath: /code
  - name: kubectl
    inputs:
      parameters:
      - name: kubefile
    container:
      image: cloudhero/kubectl:1.10.0
      command: ["kubectl"]
      args: ["apply","-f","$(KUBEFILE)"]
      env:
      - name: KUBEFILE
        value: "{{inputs.parameters.kubefile}}"
      workingDir: /code
      volumeMounts:
      - name: go-test-pvc
        mountPath: /code
  - name: istioctl
    inputs:
      parameters:
      - name: istiofile
    container:
      image: cloudhero/istioctl:1.0.3
      command: [sh, -c]
      args: ["istioctl create -f $(ISTIOFILE) || istioctl replace -f $(ISTIOFILE)"]
      env:
      - name: ISTIOFILE
        value: "{{inputs.parameters.istiofile}}"
      workingDir: /code
      volumeMounts:
      - name: go-test-pvc
        mountPath: /code
  - name: go-test-pipeline
    steps:
    - - name: cleanup
        template: alpine-sh
        arguments:
          parameters: [{name: command, value:  rm -rf /code/lost+found}]
    - - name: pull-code
        template: git
        arguments:
          parameters: [{name: targetDir, value: /}]
    - - name: build
        template: ci-dind
        arguments:
          parameters: [{name: image, value: cloudhero/go-test}]
    - - name: helm
        template: helm-template
        arguments:
          parameters: [{name: additionalParameters, value: --set namespace=go-test --set containerPort=8080 --set suffix=},
                        {name: image, value: cloudhero/go-test},
                        {name: helmFolder, value: helm},
                        {name: outputName, value: helm.yaml}]
    - - name: helm-istio
        template: helm-template
        arguments:
          parameters: [{name: additionalParameters, value: --set namespace=go-test --set suffix=},
                        {name: image, value: ""},
                        {name: helmFolder, value: helm-istio},
                        {name: outputName, value: helm-istio.yaml}]
    - - name: list
        template: alpine-sh
        arguments:
          parameters: [{name: command, value:  ls -lah /code/}]
    - - name: kubectl-deploy
        template: kubectl
        arguments:
          parameters: [{name: kubefile, value: helm.yaml}]
    - - name: istio-deploy
        template: istioctl
        arguments:
          parameters: [{name: istiofile, value: helm-istio.yaml}]